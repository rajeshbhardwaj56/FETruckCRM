@model FETruckCRM.Models.CarrierDashboardModel
@{
    ViewBag.Title = "Eternetic Logistics";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var success = TempData["Success"];
    var Err = TempData["Error"];
}

<!-- PAGE CONTENT-->

<div id="main_outer" class="active">
    @{ Html.RenderPartial("_SidebarMenu");}
    <div class="right_col">
        <div class="page-content-bg">
            <div class="top_heads">
                <div class="p_title">Dashboard</div>
                <div class="buttons-wrap">
                    <div class="left__buttons">

                    </div>
                    <div class="right_filter">
                        @Html.DropDownListFor(a => a.strFiltertypeID, new SelectList(Model.FilterType, "Value", "Text"), new { @class = "form-control-sm form-control width-140 bg-dark-blue", width = "100px" })&nbsp;
                        @Html.DropDownListFor(a => a.strDateFilterID, new SelectList(Model.DateFilter, "Value", "Text"), new { @class = "form-control-sm form-control width-140 bg-dark-blue", width = "200px" })
                        <span class="filter_text">From</span>
                        <input id="fromdate" type="text" class="form-control width-140 bg-dark-blue dt_picker" placeholder="MM/DD/YY" value="@Model.FromDate" />
                        <span class="filter_text">To</span>
                        <input id="todate" type="text" class="form-control width-140 bg-dark-blue dt_picker" placeholder="MM/DD/YY" value="@Model.ToDate" />
                        <div class="right__buttons">
                            <button class="btn btn-primary bg-red" type="button" onclick="loadData();">Go</button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- DATA TABLE-->
            <section class="">
                <div class="container">
                    <div class="row">


                        <div class="col-md-6">
                            <div class="section1">
                            <h3>Open Loads</h3>
                                <p id="openload">0</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="section2">
                                <h3>Net Margin - %</h3>
                                <p id="NetMargin">0.00</p>
                            </div>
                        </div>
                        <div class="col-md-6" style="margin-top:100px;"> <canvas id="myChart"  height="200"></canvas></div>
                        <div class="col-md-6" style="margin-top:100px;"> <canvas id="myrevenueChart"  height="200"></canvas></div>




                        <div class="col-md-12">
                            <div class="table_btn_links">
                                <div class="table_status" style="display:none;">
                                    <ul>
                                        <li><span class="table_statusClr clr-pending"></span> Pending</li>
                                        <li><span class="table_statusClr clr-open"></span> Open</li>
                                        <li><span class="table_statusClr clr-refused"></span> Refused</li>
                                        <li><span class="table_statusClr clr-covered"></span> Covered</li>
                                        <li><span class="table_statusClr clr-dispatched"></span> Dispatced</li>
                                        <li><span class="table_statusClr clr-onRoute"></span> On Route</li>
                                        <li><span class="table_statusClr clr-unLoading"></span> (Un)Loading</li>
                                        <li><span class="table_statusClr clr-inYard"></span> In Yard</li>
                                    </ul>

                                </div>
                                <div class="table_links">
                                    <ul style="display:none;">
                                        <li>
                                            <a href="#"><label class="au-checkbox"><input type="checkbox"><span class="au-checkmark"></span> Show Offices</label> </a>
                                        </li>
                                        <li>
                                            <a href="#"><label class="au-checkbox"><input type="checkbox"><span class="au-checkmark"></span> Show Time</label> </a>
                                        </li>
                                        <li>
                                            <a href="#">Open Load</a>
                                        </li>
                                        <li>
                                            <a href="#">Delivered/Completed Load</a>
                                        </li>
                                    </ul>
                                </div>

                            </div>
                            <div class="table-responsive table-responsive-data2" style="overflow-x:scroll;">

                               

                            </div>
                        </div>
                    </div>
                    </div>
            </section>
            <!-- END DATA TABLE-->

        </div>
    </div>
</div>



<script src="@Url.Content("~/assets/js/datatables.js")"></script>

<script src="@Url.Content("~/Scripts/Chart.js")"></script>


<script type="text/javascript">
    const ctx = document.getElementById('myChart').getContext('2d');
    const myChart = new Chart(ctx, {
        type: 'bar',

        data: {

        },
        options: {

        }
    });

    const ctx1 = document.getElementById('myrevenueChart').getContext('2d');
    const myrevenueChart = new Chart(ctx1, {
        type: 'bar',

        data: {

        },
        options: {

        }
    });
    function bindLoadchart(data) {
        var lbl = [];
        var dt = [];
        var clr = [];
        var clrborder = [];
        $.each(data, function () {
            let date = new Date(this.ShipperDate); // 2020-06-21
            let shortMonth = date.toLocaleString('en-us', { month: 'short' }); /* Jun */
            var str = date.getDate() + ' ' + shortMonth;
            lbl.push(str);
            dt.push(this.TotalLoad);
            clr.push('rgba(59, 118, 239, 0.6)');
            clrborder.push('rgba(59, 118, 239, 1)');
        });
       
        myChart.data = {
            labels: lbl,// ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
            datasets: [{
                label: 'Load Volume',
                data: dt,//[12, 19, 3, 5, 12, 3],
                backgroundColor: clr,
                borderColor: clrborder,
                borderWidth: 1
            }]
        };
        myChart.options = {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        };
        myChart.update();
        //const myChart = new Chart(ctx, {
        //    type: 'bar',
        //    backgroundColor: 'rgba(255, 99, 132, 0.2)',
        //    borderColor: 'rgba(255, 99, 132, 1)',
        //    data: {
        //        labels: lbl,// ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
        //        datasets: [{
        //            label: 'Load Volume',
        //            data: dt,//[12, 19, 3, 5, 12, 3],
        //            backgroundColor: clr,
        //            borderColor: clrborder,
        //            borderWidth: 1
        //        }]
        //    },
        //    options: {
        //        scales: {
        //            y: {
        //                beginAtZero: true
        //            }
        //        }
        //    }
        //});
    }

    function bindRevenuechart(data) {
        var lbl = [];
        var dt = [];
        var clr = [];
        var clrborder = [];
        $.each(data, function () {
            let date = new Date(this.ShipperDate); // 2020-06-21
            let shortMonth = date.toLocaleString('en-us', { month: 'short' }); /* Jun */
            var str = date.getDate() + ' ' + shortMonth;
            lbl.push(str);
            dt.push(this.Revenue);
            clr.push('rgba(52, 177, 235, 0.6)');
            clrborder.push('rgba(52, 177, 235, 1)');
        });


        myrevenueChart.data = {
            labels: lbl,// ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
            datasets: [{
                label: 'Gross Revenue',
                data: dt,//[12, 19, 3, 5, 12, 3],
                backgroundColor: clr,
                borderColor: clrborder,
                borderWidth: 1
            }]
        };
        myrevenueChart.options= {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        };
        myrevenueChart.update();
        //const ctx = document.getElementById('myrevenueChart').getContext('2d');
        //const myChart = new Chart(ctx, {
        //    type: 'bar',
        //    backgroundColor: 'rgba(255, 99, 132, 0.2)',
        //    borderColor: 'rgba(255, 99, 132, 1)',
        //    data: {
        //        labels: lbl,// ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
        //        datasets: [{
        //            label: 'Gross Revenue',
        //            data: dt,//[12, 19, 3, 5, 12, 3],
        //            backgroundColor: clr,
        //            borderColor: clrborder,
        //            borderWidth: 1
        //        }]
        //    },
        //    options: {
        //        scales: {
        //            y: {
        //                beginAtZero: true
        //            }
        //        }
        //    }
        //});
    }
    // this is just used to make sure values pushed into the array are not already there
    Array.prototype.contains = function (v) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] === v) return true;
        }
        return false;
    };
    var LoadStatus = null;

    $(document).ready(function () {
     if($("#strDateFilterID").val()==8)
    setThisMonthToTodayDate();

        loadData();
    });

    function loadData() {
        //debugger;
       var fdate= $("#fromdate").val();
        var ldate = $("#todate").val();
        if (fdate != "" && ldate != "") {
            var carrierid = $("#strCarrierID").val();
            var filtertypeid = $("#strFiltertypeID").val();
            $("#divLoader").show();
            var data = { "FilterTypeID": filtertypeid, "FromDate": fdate, "ToDate": ldate };
            $.ajax({
                type: 'POST',
                url: 'loadMyDashboarddata',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(data),
                dataType: 'json',
                success: function (data) {
                    debugger;
                    if (data.length > 0) {
                        $('#tblLoad').DataTable().destroy();

                        var res = JSON.parse(data);
                        if (res) {

                            var t1 = res.Table;
                            var t2 = res.Table1;
                            var t3 = res.Table2;
                            $("#openload").text(t1[0].OpenLoad);
                            $("#NetMargin").text(t2[0].Margin);

                            bindLoadchart(t3);
                            bindRevenuechart(t3);

                        }

                        $("#divLoader").hide();
                    }
                    else {
                        if (s.timeout == true) {
                            $("#divLoader").hide();

                            window.location.href = "/Account/Login";
                        }
                        else {
                            $("#tblLoad").DataTable().rows().clear().draw();
                            $("#divLoader").hide();
                        }
                    }

                },
                error: function (s) {
                    if (s.timeout == true) {

                        window.location.href = "/Account/Login";
                    } }
            });

            return true;
        }
        else {
            ShowError("From and To Dates are required.");
            return false;
        }

    }

    var err = '@Err';
        var success = '@success';
    if (err != null && err != '') {

        ShowError(err);
    }
    if (success != null && success != '') {

        ShowSucess(success);
    }
        function ShowSucess(msg) {
            $.notifyBar({ cssClass: "success", html: msg });
        }
        function ShowError(msg) {
            $.notifyBar({ cssClass: "error", html: msg });
    }

    $("#strDateFilterID").change(function () {
        debugger;
        var datefilterid = $("#strDateFilterID").val();
        var curr = new Date(); // get current date
        //var first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week
        //var last = first + 6; // last day is the first day + 6

        //var firstday = new Date(curr.setDate(first)).toUTCString();
        //var lastday = new Date(curr.setDate(last)).toUTCString();
        if (datefilterid == 1) {
            $("#fromdate").val('');
            $("#todate").val('');

        }
        if (datefilterid == 2) {
            var year = curr.getFullYear() - 1;
            var fromdate = new Date("01 / 01 /" + year);
            var Todate = new Date("12 / 31 /" + year);
            fromdate = getdateformat(fromdate);
            Todate = getdateformat(Todate);
            $("#fromdate").val(fromdate);
            $("#todate").val(Todate);

        } if (datefilterid == 3) {
           curr = new Date();
            var toMonth = curr.getMonth()+1 ;
            var toYear = curr.getFullYear();
            var currDay=curr.getDate();
            if (currDay<20) 
             {
                toMonth=toMonth-1;
                if(toMonth<=0)
                 { 
                 toMonth = 12;
                 toYear=toYear-1;
                }
             }
              var frmMonth = toMonth-1 ;
              var frmYear = toYear;
               if(frmMonth<=0)
                 { 
                 frmMonth = 12;
                 frmYear=frmYear-1;
                }
            var toDate = new Date(toMonth + "/20/" + toYear)
            var frmDate = new Date(frmMonth + "/21/" + frmYear)

            fromdate = getdateformat(frmDate);
            Todate = getdateformat(toDate);

            $("#fromdate").val(fromdate);
            $("#todate").val(Todate);

        } if (datefilterid == 4) {
            var beforeOneWeek = new Date(new Date().getTime() - 60 * 60 * 24 * 7 * 1000);
            var beforeOneWeek2 = new Date(beforeOneWeek);
            day = beforeOneWeek.getDay();
              var diffToMonday = beforeOneWeek.getDate() - day + (day === 0 ? -6 : 1);
              var lastMonday = new Date(beforeOneWeek.setDate(diffToMonday));
              var lastSunday = new Date(beforeOneWeek2.setDate(diffToMonday + 6));


           var fromdate = getdateformat(lastMonday);
           var Todate = getdateformat(lastSunday);
            $("#fromdate").val(fromdate);
            $("#todate").val(Todate);

        } if (datefilterid == 5) {

            const today = new Date();
            const yesterday = new Date(today);

            yesterday.setDate(yesterday.getDate() - 1);
            Todate = getdateformat(yesterday);
            $("#fromdate").val(Todate);
            $("#todate").val(Todate);
        } if (datefilterid == 6) {

            var fromdate = new Date();
            var Todate = new Date();
            fromdate = getdateformat(fromdate);
            Todate = getdateformat(Todate);
            $("#fromdate").val(fromdate);
            $("#todate").val(Todate);

        } if (datefilterid == 7) {
            var curr = new Date(); // get current date
            var first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week
            var last = first + 6; // last day is the first day + 6

            var firstday = new Date(curr.setDate(first)).toUTCString();
            var lastday = new Date(curr.setDate(last)).toUTCString();
            var fromdate = new Date();
            var Todate = new Date();
            fromdate = getdateformat(firstday);
            Todate = getdateformat(Todate);
            $("#fromdate").val(fromdate);
            $("#todate").val(Todate);
        }
        if (datefilterid == 8) {
            setThisMonthToTodayDate();
        }
        if (datefilterid == 9) {

            var fromdate = new Date();
            var Todate = new Date();
            var firstday = "01/01/" + fromdate.getFullYear();
            fromdate = getdateformat(firstday);
            Todate = getdateformat(Todate);
            $("#fromdate").val(fromdate);
            $("#todate").val(Todate);
        }

    });
     function setThisMonthToTodayDate()
    {
    var curr=new Date();
     var Todate = new Date();
            var frmMonth = curr.getMonth()+1 ;
            var frmYear = curr.getFullYear();
            var currDay=curr.getDate();
            if (currDay<20) 
             {
                frmMonth=frmMonth-1;
                 if(frmMonth<=0)
                 { 
                 frmMonth = 12;
                 frmYear=frmYear-1;
                }
            }
            var frmDate = new Date(frmMonth + "/21/" + frmYear)
            fromdate = getdateformat(frmDate);
            Todate = getdateformat(Todate);
            $("#fromdate").val(fromdate);
            $("#todate").val(Todate);
    }

    function getdateformat(dt) {

        var today = new Date(dt);
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = mm + '/' + dd + '/' + yyyy;
        return today;
    }

</script>
<script>
    $("#menu-toggle").click(function (e) {
        e.preventDefault();
        $("#main_outer").toggleClass("active");
    });
</script>
